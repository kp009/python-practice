# -*- coding: utf-8 -*-
"""Python_practice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UxZth0I43URmE43jLWVvEAUB2GAmEWA_
"""

x = {"New York", "Los Angeles", "Chicago"}
y = {"Los Angeles", "Chicago", "San Francisco"}
print(x-y)
print(y-x)
print(x|y)
y.add("New Jersey")
print(y)
# 1. Print places you want to visit but your friend doesnt.
# 2. Print places your friend want to visit but you dont.
# 3. Print places you both want to visit.
# 4. Add New Jersery to your friend's list.

s= {1,2,3}
s.add(4)
s

s.update([5,6])

print(s)
s.remove(3)

s

#Dictionary
person ={"name":"Alice","age": 30, "city":"New York"}
print(person)
print(person["name"])
print(person)
print(person["age"])
person["age"] = 31
print(person)
print(person["city"])
person["job"] = "Engineer"
person

car = {"make":"Tesla","model": "SUV","year": 2023,"color":"red"}
print(car)
print(car["year"])
print(car)
car["color"] = "yellow"
print(car)
car["price"] = 50000
car

person = {"name": ["Alice","Bob","John"],
          "age": [30,15,23],
          "city": ["New York","Jersey","Ohio"]}

person

students = ["Alice","Bob","Charlie","David","Eve"] #list
subjects = ("Maths", "Science","History")#tuple
submitted={"Alice","Charlie","Eve"} #set
marks ={"Alice": 85, "Bob": 70, "Charlie": 90,"David": 60,"Eve": 95} #dic

print(students[0])
print(students[-1])
students.append("Frank")
print(students)
#subjects.add("Maths")
print("Tuples are immutable")
# Print the list of studentswho didn't submitted
print(set(students)-submitted)
#print the name of students who scored above 80 using the dictionary

for student, score in marks.items():
  if score > 80:
    print(student)

marks["Frank"]= 77
print("Frank" in submitted)

students

marks

cart =["laptop","phone","charger","laptop","mouse",]

# List of student names
students = ["Alice", "Bob", "Charlie", "David", "Eve"]
# Tuple of subject codes
subjects = ("Math", "Science", "History")
# Set of students who submitted the assignment
submitted = {"Alice", "Charlie", "Eve"}
# Dictionary of marks
marks = {
"Alice": 85,
"Bob": 70,
"Charlie": 90,
"David": 60,
"Eve": 95
}

# Mini Exercise: Student Management System
# 1. Print the name of the first and last student using indexing.
# 2. Add a new student "Frank" to the student list.
# 3. Try adding "Math" again to the subjects tuple (What happens? Why?).
# 4. Print the list of students who did not submit the assignment using set operations.
# 5. Print the names of students who scored above 80 using the dictionary.
# 6. Add "Frank" with marks 77 to the dictionary and check if he’s in the submitted set.
# 7. Remove "Bob" from the student list and delete his entry from the marks dictionary.

print(students[0])
print(students[-1])

# 2. Add a new student "Frank" to the student list.
students.append("Frank")
students

# 3. Try adding "Math" again to the subjects tuple (What happens? Why?).
#subjects.add("Math")

# 4. Print the list of students who did not submit the assignment using set operations.
print(set(students)-submitted)

# 5. Print the names of students who scored above 80 using the dictionary.
for students, score in marks.items():
     if score > 80:
        print(students)

# 6. Add "Frank" with marks 77 to the dictionary and check if he’s in the submitted set.
marks["Frank"] = 77
print(marks)
submitted

students = ["Alice", "Bob", "Charlie", "David", "Eve"]
students

# 7. Remove "Bob" from the student list and delete his entry from the marks dictionary.
# marks.pop("Bob")
print(marks)
print(students)

students.remove("Bob")
print(students)

# You’re managing a small e-commerce cart:
# List of items in cart
cart = ["laptop", "phone", "charger", "laptop", "mouse", "phone"]
# Tuple of available categories
categories = ("electronics", "accessories", "home_appliances")
# Set of items on discount
discount_items = {"charger", "mouse", "keyboard"}
# Dictionary with item prices (in ₹)
prices = {
"laptop": 55000,
"phone": 30000,
"charger": 1000,
"mouse": 700,
"Keyboard": 1200
}
# Tasks
# 1. Find how many unique items are in the cart.
# 2. Print the total price of the cart (counting repeated items).
# 3. List all items in the cart that are on discount.
# 4. Try adding a new category to categories tuple (what happens?).
# 5. Create a dictionary that maps each item in the cart to its quantity.
# 6. Find the most expensive item in the cart.

# 1. Find how many unique items are in the cart.

print(cart)
print(set(cart))

print(discount_items-set(cart))

print(set(cart) -discount_items)

# 2. Print the total price of the cart (counting repeated items).
totalprice = 0
for item in cart:
   item_price = prices.get(item, 0)
   totalprice += item_price

print(totalprice)

# 3. List all items in the cart that are on discount.
list_items = []
for item in cart:
  if item in discount_items:
     list_items.append(item)
print(list_items)

# 4. Try adding a new category to categories tuple (what happens?).
# categories.add("car accessories")

# 5. Create a dictionary that maps each item in the cart to its quantity.
item_counts = {}
for item in cart:
    item_counts[item] = item_counts.get(item, 0) + 1

print(item_counts)

from collections import Counter

cart = ["laptop", "phone", "charger", "laptop", "mouse", "phone"]
item_counts = Counter(cart)

print(dict(item_counts))

# 6. Find the most expensive item in the cart.
max_price = 0
most_expensive_item = None

for item in cart:
    price = prices.get(item, 0)
    if price > max_price:
        max_price = price
        most_expensive_item = item

print("Most expensive item in the cart:", most_expensive_item, "with price ₹", max_price)

#Find how many unique items are in the cart

unique_items = set(cart)
print("Unique items in the cart:", len(unique_items))
# Print the total price of the cart (counting repeated items)

total_price = sum(prices[item] for item in cart)
print("Total price of the cart:", total_price)

# List all items in cart that are on discount

discount_items = set(cart) & discount_items
print("Items on discount:", discount_items)

# Find the most expensive item in the cart

most_expensive_item = max(set(cart), key=lambda item: prices[item])
print("Most expensive item:", most_expensive_item)

def greet(name):
  print("Hello, "+name + "!")
greet("Alice")

def square(x):
  return x*x

result = square(8)
print(result)

"""A function is a reusable block of code that performs a specific task and can be executed (called) multiple times.

 Uses of Functions with Range:
Run a block of code multiple times (range(n))

Process data in loops (e.g., iterate over list/indexes)

Break large programs into small modular units
| Pros               | Description                                    |
| ------------------ | ---------------------------------------------- |
| ✅ Code Reusability | Define once, call many times                   |
| ✅ Maintainability  | Easier to debug and update                     |
| ✅ Readability      | Code looks cleaner and more structured         |
| ✅ Abstraction      | Focus on *what* the function does, not *how*   |
| ✅ Scalability      | Reuse in larger programs or different projects |
| Cons                         | Description                                                |
| ---------------------------- | ---------------------------------------------------------- |
| ❌ Overhead in Small Code     | For very small scripts, defining functions may be overkill |
| ❌ Complexity with Parameters | Functions with many arguments can get complex              |
| ❌ Scope Confusion            | Variables inside functions may not be accessible globally  |
| ❌ Debugging Function Calls   | Tracing bugs may require following multiple function calls |

"""

#Create a function to find the cube and then find the cube of 16
def findCube(x):
  return x*x*x

result = findCube(8)
print(result)

# area of circle
def calculate_area(radius):
  pi = 3.14159 #local variable
  area = pi * radius ** 2
  return area

area = calculate_area(5)
print(area)

# Write a function called calculate_discount that takes two argument:
# print(original price)
# discount (percentage between 0 and 100)
# Returns the final price after applying the discount.

#from sre_compile import dis
def calculate_discount(price, discount):
  print(price)
  new = price - (price*discount/100)
  return new

price, discount = 10000 , 40
calculate_discount(price, discount)

def calculate_discount(price, discount):
    return price - (price * discount / 100)

price, discount = 10000, 40
final_price = calculate_discount(price, discount)
print("Final Price after discount: ₹", final_price)

def calculate_discount(original_price, discount):
  # Print the original Price
  print("Original Price:", original_price)

  # Check if the discount is valid
  if discount < 0 or discount > 100:
    print("Invalid")

  # Print Final Price
  final_price = original_price * (1-discount/100)
  return round(final_price, 2) # rounds it to 2 decimal places

final = calculate_discount(529, 14)
print("Final Price:", final)

#Lamda function is an anonymous, inline function defined using lamda keyword

x = lambda x: x*x
print(x(5))

is_even = lambda x:x % 2 ==0
print(is_even(7))

add_two = lambda a,b: a+b
print(add_two(4, 5))

with open("attendance.txt", "w") as file:
  file.write("")
